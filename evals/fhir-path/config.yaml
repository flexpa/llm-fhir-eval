# yaml-language-server: $schema=https://promptfoo.dev/config-schema.json
description: 'FHIR Path evaluation'

providers:
  - anthropic:messages:claude-3-5-sonnet-20241022
  - openai:chat:gpt-4o
  - openai:chat:gpt-4o-mini

prompts:
  - label: 'FHIR Path Extraction'
    description: 'Extract data from a FHIR resource using a FHIR Path expression.'
    raw: |
      You are a FHIR data extraction specialist.
      Given a FHIR resource and a FHIR Path expression,
      extract the requested data and explain your reasoning.
      You must output only the final value of the FHIR Path expression.
      You must not include any other commentary or explanation.
      It is not necessary to wrap the return result in extra quotes when the result is a string.

      FHIR Resource:
      {{resource}}

      FHIR Path Expression:
      {{fhirpath}}

tests:
  # New FHIR Path extraction tests
  - vars:
      resource: |
        {
          "resourceType": "Patient",
          "id": "example",
          "name": [
            {
              "use": "official",
              "family": "Smith",
              "given": ["John", "Jacob"] 
            }
          ],
          "birthDate": "1990-01-01"
        }
      fhirpath: "Patient.name.where(use='official').given"
    assert:
      - type: equals
        value: '["John", "Jacob"]'

  - vars:
      resource: |
        {
          "resourceType": "Observation",
          "id": "blood-pressure",
          "status": "final",
          "code": {
            "coding": [
              {
                "system": "http://loinc.org",
                "code": "85354-9",
                "display": "Blood pressure panel"
              }
            ]
          },
          "component": [
            {
              "code": {
                "coding": [
                  {
                    "system": "http://loinc.org",
                    "code": "8480-6",
                    "display": "Systolic blood pressure"
                  }
                ]
              },
              "valueQuantity": {
                "value": 120,
                "unit": "mmHg"
              }
            }
          ]
        }
      fhirpath: "Observation.component.where(code.coding.code='8480-6').valueQuantity.value"
    assert:
      - type: equals
        value: '120'

  # Test nested array access with conditions
  - vars:
      resource: |
        {
          "resourceType": "Patient",
          "id": "example",
          "contact": [
            {
              "relationship": [
                {
                  "coding": [
                    {
                      "system": "http://terminology.hl7.org/CodeSystem/v2-0131",
                      "code": "N",
                      "display": "Next-of-Kin"
                    }
                  ]
                }
              ],
              "name": {
                "family": "Johnson",
                "given": ["Mary"]
              },
              "telecom": [
                {
                  "system": "phone",
                  "value": "555-555-5555"
                }
              ]
            }
          ]
        }
      fhirpath: "Patient.contact.where(relationship.coding.code='N').telecom.where(system='phone').value"
    assert:
      - type: equals
        value: '555-555-5555'

  # Test date manipulation
  - vars:
      resource: |
        {
          "resourceType": "Condition",
          "id": "example",
          "code": {
            "coding": [
              {
                "system": "http://snomed.info/sct",
                "code": "442311008",
                "display": "Single liveborn"
              }
            ]
          },
          "onsetDateTime": "2023-01-15T14:30:00Z",
          "recordedDate": "2023-01-16T09:00:00Z"
        }
      fhirpath: 'Condition.onsetDateTime.toString()'
    assert:
      - type: equals
        value: '2023-01-15T14:30:00Z'

  # Test boolean logic and multiple conditions
  - vars:
      resource: |
        {
          "resourceType": "MedicationRequest",
          "id": "example",
          "status": "active",
          "intent": "order",
          "medicationCodeableConcept": {
            "coding": [
              {
                "system": "http://www.nlm.nih.gov/research/umls/rxnorm",
                "code": "1049502",
                "display": "Acetaminophen 325 MG"
              }
            ]
          },
          "dosageInstruction": [
            {
              "timing": {
                "repeat": {
                  "frequency": 4,
                  "period": 1,
                  "periodUnit": "d"
                }
              },
              "doseAndRate": [
                {
                  "doseQuantity": {
                    "value": 1,
                    "unit": "tablet"
                  }
                }
              ]
            }
          ]
        }
      fhirpath: "MedicationRequest.where(status='active' and intent='order').dosageInstruction.doseAndRate.doseQuantity.value"
    assert:
      - type: equals
        value: '1'

  # Test aggregate functions
  - vars:
      resource: |
        {
          "resourceType": "DiagnosticReport",
          "id": "example",
          "status": "final",
          "result": [
            {
              "reference": "Observation/obs1",
              "display": "Glucose"
            },
            {
              "reference": "Observation/obs2",
              "display": "Creatinine"
            },
            {
              "reference": "Observation/obs3",
              "display": "Sodium"
            }
          ]
        }
      fhirpath: 'DiagnosticReport.result.count()'
    assert:
      - type: equals
        value: '3'

  # Test exists and contains functions
  - vars:
      resource: |
        {
          "resourceType": "AllergyIntolerance",
          "id": "example",
          "clinicalStatus": {
            "coding": [
              {
                "system": "http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical",
                "code": "active",
                "display": "Active"
              }
            ]
          },
          "verificationStatus": {
            "coding": [
              {
                "system": "http://terminology.hl7.org/CodeSystem/allergyintolerance-verification",
                "code": "confirmed",
                "display": "Confirmed"
              }
            ]
          },
          "category": ["medication"],
          "criticality": "high",
          "code": {
            "coding": [
              {
                "system": "http://www.nlm.nih.gov/research/umls/rxnorm",
                "code": "7980",
                "display": "Penicillin"
              }
            ]
          }
        }
      fhirpath: "AllergyIntolerance.category.contains('medication') and AllergyIntolerance.criticality='high'"
    assert:
      - type: equals
        value: 'true'

  # Test combining multiple paths and string manipulation
  - vars:
      resource: |
        {
          "resourceType": "Practitioner",
          "id": "example",
          "identifier": [
            {
              "system": "http://hl7.org/fhir/sid/us-npi",
              "value": "9941339108"
            }
          ],
          "name": [
            {
              "family": "Smith",
              "given": ["John", "Jacob"],
              "prefix": ["Dr"]
            }
          ],
          "qualification": [
            {
              "code": {
                "coding": [
                  {
                    "system": "http://terminology.hl7.org/CodeSystem/v2-0360",
                    "code": "MD",
                    "display": "Doctor of Medicine"
                  }
                ]
              }
            }
          ]
        }
      fhirpath: "Practitioner.name.select(prefix.join(' ') & ' ' & given.join(' ') & ' ' & family).first()"
    assert:
      - type: equals
        value: 'Dr John Jacob Smith'

  # Test Bundle filtering with ofType and multiple conditions
  - vars:
      resource: |
        {
          "resourceType": "Bundle",
          "type": "searchset",
          "entry": [
            {
              "resource": {
                "resourceType": "Observation",
                "id": "bp-1",
                "status": "final",
                "code": {
                  "coding": [
                    {
                      "system": "http://loinc.org",
                      "code": "8462-4",
                      "display": "Diastolic blood pressure"
                    }
                  ]
                },
                "valueQuantity": {
                  "value": 95,
                  "unit": "mmHg",
                  "system": "http://unitsofmeasure.org",
                  "code": "mm[Hg]"
                }
              }
            },
            {
              "resource": {
                "resourceType": "Observation",
                "id": "bp-2",
                "status": "final",
                "code": {
                  "coding": [
                    {
                      "system": "http://loinc.org",
                      "code": "8462-4",
                      "display": "Diastolic blood pressure"
                    }
                  ]
                },
                "valueQuantity": {
                  "value": 88,
                  "unit": "mmHg",
                  "system": "http://unitsofmeasure.org",
                  "code": "mm[Hg]"
                }
              }
            },
            {
              "resource": {
                "resourceType": "Observation",
                "id": "temp-1",
                "status": "final",
                "code": {
                  "coding": [
                    {
                      "system": "http://loinc.org",
                      "code": "8310-5",
                      "display": "Body temperature"
                    }
                  ]
                },
                "valueQuantity": {
                  "value": 37.5,
                  "unit": "C",
                  "system": "http://unitsofmeasure.org",
                  "code": "Cel"
                }
              }
            },
            {
              "resource": {
                "resourceType": "Observation",
                "id": "bp-3",
                "status": "final",
                "code": {
                  "coding": [
                    {
                      "system": "http://loinc.org",
                      "code": "8462-4",
                      "display": "Diastolic blood pressure"
                    }
                  ]
                },
                "valueQuantity": {
                  "value": 92,
                  "unit": "mmHg",
                  "system": "http://unitsofmeasure.org",
                  "code": "mm[Hg]"
                }
              }
            }
          ]
        }
      fhirpath: "Bundle.entry.resource.ofType(Observation).where(code.coding.code = '8462-4' and valueQuantity.value > 90)"
    assert:
      - type: is-json
      - type: javascript
        value: |
          const result = JSON.parse(output);
          return Array.isArray(result) && 
                 result.length === 2 && 
                 result.every(obs => 
                   obs.resourceType === 'Observation' &&
                   obs.code.coding[0].code === '8462-4' &&
                   obs.valueQuantity.value > 90
                 ) &&
                 result.map(obs => obs.valueQuantity.value).includes(95) &&
                 result.map(obs => obs.valueQuantity.value).includes(92);
